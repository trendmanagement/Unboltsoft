<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
// WARNING                                                                         WARNING
// WARNING    DO NOT EDIT THIS .CS FILE, BECAUSE ALL YOUR CHANGES WILL BE LOST!    WARNING
// WARNING    EDIT CORRESPONDING .TT FILE INSTEAD!                                 WARNING
// WARNING                                                                         WARNING
// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Data.SqlClient;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ICE_Import
{
    public partial class FormDB : Form
    {
<# string[] methodNameSuffix = { string.Empty, "Test" }; #>
<# string[] tableClassPrefix = { string.Empty, "test_" }; #>
<# string[] tableNamePrefix = { string.Empty, "test_" }; #>
<# for (int i = 0; i < 2; i++) #>
<# { #>
<# string TblContract = tableClassPrefix[i] + "tblcontract"; #>
<# string TblDailyContractSettlement = tableClassPrefix[i] + "tbldailycontractsettlement"; #>
<# string TblOption = tableClassPrefix[i] + "tbloption"; #>
<# string TblOptionData = tableClassPrefix[i] + "tbloptiondata"; #>
        async void PullDataFromDB<# Write(methodNameSuffix[i]); #>()
        {
            cts = new CancellationTokenSource();

            Dictionary<DateTime, long> idcontractDictionary = null;
            List<<# Write(tableNamePrefix[i]); #>tblcontract> contractList = null;
            List<<# Write(tableNamePrefix[i]); #>tbldailycontractsettlement> dailyContractList = null;
            List<<# Write(tableNamePrefix[i]); #>tbloption> optionList = null;
            List<<# Write(tableNamePrefix[i]); #>tbloptiondata> optionDataList = null;
            
            try
            {
                AsyncTaskListener.LogMessage("Started pulling FUTURES data...");
                await Task.Run(() => PullFutures<# Write(methodNameSuffix[i]); #>(out idcontractDictionary, out contractList), cts.Token);
                AsyncTaskListener.LogMessageFormat("Pulled {0} entries from {1} {2}TBLCONTRACT table", contractList.Count, DatabaseName, TablesPrefix);

                AsyncTaskListener.LogMessage("Started pulling DAILY FUTURES data...");
                await Task.Run(() => PullDailyFutures<# Write(methodNameSuffix[i]); #>(idcontractDictionary, out dailyContractList), cts.Token);
                AsyncTaskListener.LogMessageFormat("Pulled {0} entries from {1} {2}TBLDAILYCONTRACTSETTLEMENT table", dailyContractList.Count, DatabaseName, TablesPrefix);

                AsyncTaskListener.LogMessage("Started pulling OPTIONS data...");
                await Task.Run(() => PullOptions<# Write(methodNameSuffix[i]); #>(out optionList), cts.Token);
                AsyncTaskListener.LogMessageFormat("Pulled {0} entries from {1} {2}TBLOPTIONS table", optionList.Count, DatabaseName, TablesPrefix);

                AsyncTaskListener.LogMessage("Started pulling DAILY OPTIONS data...");
                await Task.Run(() => PullDailyOptions(out optionDataList), cts.Token);
                AsyncTaskListener.LogMessageFormat("Pulled {0} entries from {1} {2}TBLOPTIONDATAS table", optionDataList.Count, DatabaseName, TablesPrefix);
            }
            catch (OperationCanceledException cancel)
            {
                AsyncTaskListener.LogMessage(cancel.Message);
            }
#if !DEBUG
            catch (Exception ex)
            {
                AsyncTaskListener.LogMessage("ERROR");
                AsyncTaskListener.LogMessage(ex.Message);
            }
#endif
            finally
            {
                int totalCount =
                    contractList.Count() +
                    dailyContractList.Count() +
                    optionList.Count() +
                    optionDataList.Count();
                AsyncTaskListener.LogMessageFormat("Pulled: {0} entries from {1} DB", totalCount, DatabaseName);
            }

            dataGridViewContract.DataSource = contractList;
            dataGridViewDailyContract.DataSource = dailyContractList;
            dataGridViewOption.DataSource = optionList;
            dataGridViewOptionData.DataSource = optionDataList;

            EnableDisable(false);
        }

        void PullFutures<# Write(methodNameSuffix[i]); #>(
            out Dictionary<DateTime, long> idcontractDictionary,
            out List<<# Write(tableNamePrefix[i]); #>tblcontract> contractList)
        {
            idcontractDictionary = new Dictionary<DateTime, long>();
            contractList = new List<<# Write(tableNamePrefix[i]); #>tblcontract>();

            var tblcontracts = Context.<# Write(tableNamePrefix[i]); #>tblcontracts;

			int count = 1000;

            if (rb_LocalDB.Checked || count <= (from item in tblcontracts select item).Count())
            {
                contractList = (from item in tblcontracts
                                select item).ToList();
            }
            else
            {
				foreach (var stripName in StripNameHashSet)
				{
					<# Write(tableNamePrefix[i]); #>tblcontract currentContract;

					try
					{
						currentContract = (from item in tblcontracts
										   where item.monthint == stripName.Month &&
										   item.year == stripName.Year &&
										   item.idinstrument == IdInstrument
										   select item
										   ).First();
					}
					catch (SqlException)
					{
						continue;
					}
					catch (InvalidOperationException)
					{
						continue;
					}
        
					idcontractDictionary.Add(stripName, currentContract.idcontract);
					contractList.Add(currentContract);
				}
            }

            contractList = contractList.OrderBy(item => item.idcontract).ToList();
        }

        void PullDailyFutures<# Write(methodNameSuffix[i]); #>(
            Dictionary<DateTime, long> idcontractDictionary,
            out List<<# Write(tableNamePrefix[i]); #>tbldailycontractsettlement> dailyContractList)
        {
            dailyContractList = new List<<# Write(tableNamePrefix[i]); #>tbldailycontractsettlement>();

            var tbldailycontractsettlements = Context.<# Write(tableNamePrefix[i]); #>tbldailycontractsettlements;

							
			int count = 1000;

            if (rb_LocalDB.Checked || count <= (from item in tbldailycontractsettlements select item).Count())
            {
                dailyContractList = (from item in tbldailycontractsettlements
                                select item).ToList();
            }
            else
            {

            foreach (var tuple in StripNameDateHashSet)
            {
                <# Write(tableNamePrefix[i]); #>tbldailycontractsettlement currentDailyContract;

                long idcontract;
                bool isID = idcontractDictionary.TryGetValue(tuple.Item1, out idcontract);
                if (isID)
                {
                    try
                    {
                        currentDailyContract = (from item in tbldailycontractsettlements
                                                where item.idcontract == idcontract &&
                                                item.date == tuple.Item2
                                                select item
                                                ).First();
                    }
                    catch (SqlException)
                    {
                        continue;
                    }
                    catch (InvalidOperationException)
                    {
                        continue;
                    }
                }
                else
                {
                    continue;
                }

                dailyContractList.Add(currentDailyContract);
            }
			}
            dailyContractList = dailyContractList.OrderBy(item => item.idcontract).OrderBy(item => item.date).ToList();
        }

        void PullOptions<# Write(methodNameSuffix[i]); #>(
            out List<<# Write(tableNamePrefix[i]); #>tbloption> optionList)
        {
            optionList = new List<<# Write(tableNamePrefix[i]); #>tbloption>();

            var tbloptions = Context.<# Write(tableNamePrefix[i]); #>tbloptions;

			int count = 1000;

            if (rb_LocalDB.Checked || count <= (from item in tbloptions select item).Count())
            {
                optionList = (from item in tbloptions
                                select item).ToList();
            }
            else
            {
				try
				{
					optionList = (from item in tbloptions
								  where 
								  item.optionyear >= StripNameHashSet.Min().Year &&
								  item.optionyear <= StripNameHashSet.Max().Year &&
								  item.idinstrument == IdInstrument
								  select item
								  ).ToList();
				}
				catch (SqlException)
				{
				}
			}
            optionList = optionList.OrderBy(item => item.idoption).ToList();
        }

        void PullDailyOptions(
            out List<<# Write(tableNamePrefix[i]); #>tbloptiondata> optionDataList)
        {
            optionDataList = new List<<# Write(tableNamePrefix[i]); #>tbloptiondata>();

            var tbloptiondatas = Context.<# Write(tableNamePrefix[i]); #>tbloptiondatas;

			int count = 1000;

            if (rb_LocalDB.Checked || count <= (from item in tbloptiondatas select item).Count())
            {
                optionDataList = (from item in tbloptiondatas
                                select item).ToList();
            }
            else
            {


			if (IdOptionHashSet.Count == 0)
            {

                try
                {
                    optionDataList = (from item in tbloptiondatas
                                             select item).ToList();
                }
                catch (SqlException)
                {
                }

            }
            else
            {
                foreach (var id in IdOptionHashSet)
                {
					IEnumerable<<# Write(tableNamePrefix[i]); #>tbloptiondata> currentOptionData;

                    try
                    {
                        currentOptionData = (from item in tbloptiondatas
                                             where
                                             item.idoption == id
                                             select item);
                    }
                    catch (SqlException)
                    {
                        continue;
                    }

                    //optionDataList.AddRange(currentOptionData);
                }
            }
			}
            optionDataList = optionDataList.OrderBy(item => item.idoption).ToList();
        }

<# } #>
    }
}