#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ICE_Import
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TestDatabase")]
	public partial class OptionsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Inserttbloption(tbloption instance);
    partial void Updatetbloption(tbloption instance);
    partial void Deletetbloption(tbloption instance);
    partial void Inserttbloptiondata(tbloptiondata instance);
    partial void Updatetbloptiondata(tbloptiondata instance);
    partial void Deletetbloptiondata(tbloptiondata instance);
    partial void Inserttbldailycontractsettlement(tbldailycontractsettlement instance);
    partial void Updatetbldailycontractsettlement(tbldailycontractsettlement instance);
    partial void Deletetbldailycontractsettlement(tbldailycontractsettlement instance);
    partial void Inserttblcontract(tblcontract instance);
    partial void Updatetblcontract(tblcontract instance);
    partial void Deletetblcontract(tblcontract instance);
    #endregion
		
		public OptionsDataContext() : 
				base(global::ICE_Import.Properties.Settings.Default.TestDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OptionsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OptionsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OptionsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OptionsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tbloption> tbloptions
		{
			get
			{
				return this.GetTable<tbloption>();
			}
		}
		
		public System.Data.Linq.Table<tbloptiondata> tbloptiondatas
		{
			get
			{
				return this.GetTable<tbloptiondata>();
			}
		}
		
		public System.Data.Linq.Table<tbldailycontractsettlement> tbldailycontractsettlements
		{
			get
			{
				return this.GetTable<tbldailycontractsettlement>();
			}
		}
		
		public System.Data.Linq.Table<tblcontract> tblcontracts
		{
			get
			{
				return this.GetTable<tblcontract>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbloptions")]
	public partial class tbloption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _idoption;
		
		private string _optionname;
		
		private char _optionmanth;
		
		private int _optionmanthint;
		
		private int _optionyear;
		
		private double _strikeprice;
		
		private char _callorput;
		
		private long _idinstrument;
		
		private System.DateTime _expirationdate;
		
		private long _idcontract;
		
		private string _cqgsymbol;
		
		private EntitySet<tbloptiondata> _tbloptiondatas;
		
		private EntitySet<tbldailycontractsettlement> _tbldailycontractsettlements;
		
		private EntityRef<tblcontract> _tblcontract;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidoptionChanging(long value);
    partial void OnidoptionChanged();
    partial void OnoptionnameChanging(string value);
    partial void OnoptionnameChanged();
    partial void OnoptionmanthChanging(char value);
    partial void OnoptionmanthChanged();
    partial void OnoptionmanthintChanging(int value);
    partial void OnoptionmanthintChanged();
    partial void OnoptionyearChanging(int value);
    partial void OnoptionyearChanged();
    partial void OnstrikepriceChanging(double value);
    partial void OnstrikepriceChanged();
    partial void OncallorputChanging(char value);
    partial void OncallorputChanged();
    partial void OnidinstrumentChanging(long value);
    partial void OnidinstrumentChanged();
    partial void OnexpirationdateChanging(System.DateTime value);
    partial void OnexpirationdateChanged();
    partial void OnidcontractChanging(long value);
    partial void OnidcontractChanged();
    partial void OncqgsymbolChanging(string value);
    partial void OncqgsymbolChanged();
    #endregion
		
		public tbloption()
		{
			this._tbloptiondatas = new EntitySet<tbloptiondata>(new Action<tbloptiondata>(this.attach_tbloptiondatas), new Action<tbloptiondata>(this.detach_tbloptiondatas));
			this._tbldailycontractsettlements = new EntitySet<tbldailycontractsettlement>(new Action<tbldailycontractsettlement>(this.attach_tbldailycontractsettlements), new Action<tbldailycontractsettlement>(this.detach_tbldailycontractsettlements));
			this._tblcontract = default(EntityRef<tblcontract>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idoption", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long idoption
		{
			get
			{
				return this._idoption;
			}
			set
			{
				if ((this._idoption != value))
				{
					this.OnidoptionChanging(value);
					this.SendPropertyChanging();
					this._idoption = value;
					this.SendPropertyChanged("idoption");
					this.OnidoptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_optionname", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string optionname
		{
			get
			{
				return this._optionname;
			}
			set
			{
				if ((this._optionname != value))
				{
					this.OnoptionnameChanging(value);
					this.SendPropertyChanging();
					this._optionname = value;
					this.SendPropertyChanged("optionname");
					this.OnoptionnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_optionmanth", DbType="Char(1) NOT NULL")]
		public char optionmanth
		{
			get
			{
				return this._optionmanth;
			}
			set
			{
				if ((this._optionmanth != value))
				{
					this.OnoptionmanthChanging(value);
					this.SendPropertyChanging();
					this._optionmanth = value;
					this.SendPropertyChanged("optionmanth");
					this.OnoptionmanthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_optionmanthint", DbType="Int NOT NULL")]
		public int optionmanthint
		{
			get
			{
				return this._optionmanthint;
			}
			set
			{
				if ((this._optionmanthint != value))
				{
					this.OnoptionmanthintChanging(value);
					this.SendPropertyChanging();
					this._optionmanthint = value;
					this.SendPropertyChanged("optionmanthint");
					this.OnoptionmanthintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_optionyear", DbType="Int NOT NULL")]
		public int optionyear
		{
			get
			{
				return this._optionyear;
			}
			set
			{
				if ((this._optionyear != value))
				{
					this.OnoptionyearChanging(value);
					this.SendPropertyChanging();
					this._optionyear = value;
					this.SendPropertyChanged("optionyear");
					this.OnoptionyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_strikeprice", DbType="Float NOT NULL")]
		public double strikeprice
		{
			get
			{
				return this._strikeprice;
			}
			set
			{
				if ((this._strikeprice != value))
				{
					this.OnstrikepriceChanging(value);
					this.SendPropertyChanging();
					this._strikeprice = value;
					this.SendPropertyChanged("strikeprice");
					this.OnstrikepriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_callorput", DbType="Char(1) NOT NULL")]
		public char callorput
		{
			get
			{
				return this._callorput;
			}
			set
			{
				if ((this._callorput != value))
				{
					this.OncallorputChanging(value);
					this.SendPropertyChanging();
					this._callorput = value;
					this.SendPropertyChanged("callorput");
					this.OncallorputChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idinstrument", DbType="BigInt NOT NULL")]
		public long idinstrument
		{
			get
			{
				return this._idinstrument;
			}
			set
			{
				if ((this._idinstrument != value))
				{
					if (this._tblcontract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidinstrumentChanging(value);
					this.SendPropertyChanging();
					this._idinstrument = value;
					this.SendPropertyChanged("idinstrument");
					this.OnidinstrumentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expirationdate", DbType="Date NOT NULL")]
		public System.DateTime expirationdate
		{
			get
			{
				return this._expirationdate;
			}
			set
			{
				if ((this._expirationdate != value))
				{
					this.OnexpirationdateChanging(value);
					this.SendPropertyChanging();
					this._expirationdate = value;
					this.SendPropertyChanged("expirationdate");
					this.OnexpirationdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idcontract", DbType="BigInt NOT NULL")]
		public long idcontract
		{
			get
			{
				return this._idcontract;
			}
			set
			{
				if ((this._idcontract != value))
				{
					this.OnidcontractChanging(value);
					this.SendPropertyChanging();
					this._idcontract = value;
					this.SendPropertyChanged("idcontract");
					this.OnidcontractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cqgsymbol", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string cqgsymbol
		{
			get
			{
				return this._cqgsymbol;
			}
			set
			{
				if ((this._cqgsymbol != value))
				{
					this.OncqgsymbolChanging(value);
					this.SendPropertyChanging();
					this._cqgsymbol = value;
					this.SendPropertyChanged("cqgsymbol");
					this.OncqgsymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbloption_tbloptiondata", Storage="_tbloptiondatas", ThisKey="idoption", OtherKey="idoption")]
		public EntitySet<tbloptiondata> tbloptiondatas
		{
			get
			{
				return this._tbloptiondatas;
			}
			set
			{
				this._tbloptiondatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbloption_tbldailycontractsettlement", Storage="_tbldailycontractsettlements", ThisKey="idcontract", OtherKey="idcontract")]
		public EntitySet<tbldailycontractsettlement> tbldailycontractsettlements
		{
			get
			{
				return this._tbldailycontractsettlements;
			}
			set
			{
				this._tbldailycontractsettlements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblcontract_tbloption", Storage="_tblcontract", ThisKey="idinstrument", OtherKey="idinstrument", IsForeignKey=true)]
		public tblcontract tblcontract
		{
			get
			{
				return this._tblcontract.Entity;
			}
			set
			{
				tblcontract previousValue = this._tblcontract.Entity;
				if (((previousValue != value) 
							|| (this._tblcontract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblcontract.Entity = null;
						previousValue.tbloptions.Remove(this);
					}
					this._tblcontract.Entity = value;
					if ((value != null))
					{
						value.tbloptions.Add(this);
						this._idinstrument = value.idinstrument;
					}
					else
					{
						this._idinstrument = default(long);
					}
					this.SendPropertyChanged("tblcontract");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbloptiondatas(tbloptiondata entity)
		{
			this.SendPropertyChanging();
			entity.tbloption = this;
		}
		
		private void detach_tbloptiondatas(tbloptiondata entity)
		{
			this.SendPropertyChanging();
			entity.tbloption = null;
		}
		
		private void attach_tbldailycontractsettlements(tbldailycontractsettlement entity)
		{
			this.SendPropertyChanging();
			entity.tbloption = this;
		}
		
		private void detach_tbldailycontractsettlements(tbldailycontractsettlement entity)
		{
			this.SendPropertyChanging();
			entity.tbloption = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbloptiondata")]
	public partial class tbloptiondata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _idoptiondata;
		
		private long _idoption;
		
		private System.DateTime _datetime;
		
		private double _price;
		
		private double _impliedvol;
		
		private double _timetoexpinyear;
		
		private EntityRef<tbloption> _tbloption;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidoptiondataChanging(long value);
    partial void OnidoptiondataChanged();
    partial void OnidoptionChanging(long value);
    partial void OnidoptionChanged();
    partial void OndatetimeChanging(System.DateTime value);
    partial void OndatetimeChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OnimpliedvolChanging(double value);
    partial void OnimpliedvolChanged();
    partial void OntimetoexpinyearChanging(double value);
    partial void OntimetoexpinyearChanged();
    #endregion
		
		public tbloptiondata()
		{
			this._tbloption = default(EntityRef<tbloption>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idoptiondata", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long idoptiondata
		{
			get
			{
				return this._idoptiondata;
			}
			set
			{
				if ((this._idoptiondata != value))
				{
					this.OnidoptiondataChanging(value);
					this.SendPropertyChanging();
					this._idoptiondata = value;
					this.SendPropertyChanged("idoptiondata");
					this.OnidoptiondataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idoption", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long idoption
		{
			get
			{
				return this._idoption;
			}
			set
			{
				if ((this._idoption != value))
				{
					if (this._tbloption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidoptionChanging(value);
					this.SendPropertyChanging();
					this._idoption = value;
					this.SendPropertyChanged("idoption");
					this.OnidoptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datetime", DbType="DateTime2 NOT NULL", IsPrimaryKey=true)]
		public System.DateTime datetime
		{
			get
			{
				return this._datetime;
			}
			set
			{
				if ((this._datetime != value))
				{
					this.OndatetimeChanging(value);
					this.SendPropertyChanging();
					this._datetime = value;
					this.SendPropertyChanged("datetime");
					this.OndatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_impliedvol", DbType="Float NOT NULL")]
		public double impliedvol
		{
			get
			{
				return this._impliedvol;
			}
			set
			{
				if ((this._impliedvol != value))
				{
					this.OnimpliedvolChanging(value);
					this.SendPropertyChanging();
					this._impliedvol = value;
					this.SendPropertyChanged("impliedvol");
					this.OnimpliedvolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timetoexpinyear", DbType="Float NOT NULL")]
		public double timetoexpinyear
		{
			get
			{
				return this._timetoexpinyear;
			}
			set
			{
				if ((this._timetoexpinyear != value))
				{
					this.OntimetoexpinyearChanging(value);
					this.SendPropertyChanging();
					this._timetoexpinyear = value;
					this.SendPropertyChanged("timetoexpinyear");
					this.OntimetoexpinyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbloption_tbloptiondata", Storage="_tbloption", ThisKey="idoption", OtherKey="idoption", IsForeignKey=true)]
		public tbloption tbloption
		{
			get
			{
				return this._tbloption.Entity;
			}
			set
			{
				tbloption previousValue = this._tbloption.Entity;
				if (((previousValue != value) 
							|| (this._tbloption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbloption.Entity = null;
						previousValue.tbloptiondatas.Remove(this);
					}
					this._tbloption.Entity = value;
					if ((value != null))
					{
						value.tbloptiondatas.Add(this);
						this._idoption = value.idoption;
					}
					else
					{
						this._idoption = default(long);
					}
					this.SendPropertyChanged("tbloption");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbldailycontractsettlements")]
	public partial class tbldailycontractsettlement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _iddailycontractsettlements;
		
		private long _idcontract;
		
		private System.DateTime _date;
		
		private double _settlement;
		
		private long _volume;
		
		private long _openinterest;
		
		private EntityRef<tbloption> _tbloption;
		
		private EntityRef<tblcontract> _tblcontract;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniddailycontractsettlementsChanging(long value);
    partial void OniddailycontractsettlementsChanged();
    partial void OnidcontractChanging(long value);
    partial void OnidcontractChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnsettlementChanging(double value);
    partial void OnsettlementChanged();
    partial void OnvolumeChanging(long value);
    partial void OnvolumeChanged();
    partial void OnopeninterestChanging(long value);
    partial void OnopeninterestChanged();
    #endregion
		
		public tbldailycontractsettlement()
		{
			this._tbloption = default(EntityRef<tbloption>);
			this._tblcontract = default(EntityRef<tblcontract>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iddailycontractsettlements", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long iddailycontractsettlements
		{
			get
			{
				return this._iddailycontractsettlements;
			}
			set
			{
				if ((this._iddailycontractsettlements != value))
				{
					this.OniddailycontractsettlementsChanging(value);
					this.SendPropertyChanging();
					this._iddailycontractsettlements = value;
					this.SendPropertyChanged("iddailycontractsettlements");
					this.OniddailycontractsettlementsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idcontract", DbType="BigInt NOT NULL")]
		public long idcontract
		{
			get
			{
				return this._idcontract;
			}
			set
			{
				if ((this._idcontract != value))
				{
					if ((this._tbloption.HasLoadedOrAssignedValue || this._tblcontract.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidcontractChanging(value);
					this.SendPropertyChanging();
					this._idcontract = value;
					this.SendPropertyChanged("idcontract");
					this.OnidcontractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_settlement", DbType="Float NOT NULL")]
		public double settlement
		{
			get
			{
				return this._settlement;
			}
			set
			{
				if ((this._settlement != value))
				{
					this.OnsettlementChanging(value);
					this.SendPropertyChanging();
					this._settlement = value;
					this.SendPropertyChanged("settlement");
					this.OnsettlementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_volume", DbType="BigInt NOT NULL")]
		public long volume
		{
			get
			{
				return this._volume;
			}
			set
			{
				if ((this._volume != value))
				{
					this.OnvolumeChanging(value);
					this.SendPropertyChanging();
					this._volume = value;
					this.SendPropertyChanged("volume");
					this.OnvolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_openinterest", DbType="BigInt NOT NULL")]
		public long openinterest
		{
			get
			{
				return this._openinterest;
			}
			set
			{
				if ((this._openinterest != value))
				{
					this.OnopeninterestChanging(value);
					this.SendPropertyChanging();
					this._openinterest = value;
					this.SendPropertyChanged("openinterest");
					this.OnopeninterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbloption_tbldailycontractsettlement", Storage="_tbloption", ThisKey="idcontract", OtherKey="idcontract", IsForeignKey=true)]
		public tbloption tbloption
		{
			get
			{
				return this._tbloption.Entity;
			}
			set
			{
				tbloption previousValue = this._tbloption.Entity;
				if (((previousValue != value) 
							|| (this._tbloption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbloption.Entity = null;
						previousValue.tbldailycontractsettlements.Remove(this);
					}
					this._tbloption.Entity = value;
					if ((value != null))
					{
						value.tbldailycontractsettlements.Add(this);
						this._idcontract = value.idcontract;
					}
					else
					{
						this._idcontract = default(long);
					}
					this.SendPropertyChanged("tbloption");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblcontract_tbldailycontractsettlement", Storage="_tblcontract", ThisKey="idcontract", OtherKey="idcontract", IsForeignKey=true)]
		public tblcontract tblcontract
		{
			get
			{
				return this._tblcontract.Entity;
			}
			set
			{
				tblcontract previousValue = this._tblcontract.Entity;
				if (((previousValue != value) 
							|| (this._tblcontract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblcontract.Entity = null;
						previousValue.tbldailycontractsettlements.Remove(this);
					}
					this._tblcontract.Entity = value;
					if ((value != null))
					{
						value.tbldailycontractsettlements.Add(this);
						this._idcontract = value.idcontract;
					}
					else
					{
						this._idcontract = default(long);
					}
					this.SendPropertyChanged("tblcontract");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblcontracts")]
	public partial class tblcontract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _idcontract;
		
		private string _contractname;
		
		private char _month;
		
		private short _monthint;
		
		private long _year;
		
		private long _idinstrument;
		
		private System.DateTime _expirationdate;
		
		private string _cqgsymbol;
		
		private EntitySet<tbloption> _tbloptions;
		
		private EntitySet<tbldailycontractsettlement> _tbldailycontractsettlements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidcontractChanging(long value);
    partial void OnidcontractChanged();
    partial void OncontractnameChanging(string value);
    partial void OncontractnameChanged();
    partial void OnmonthChanging(char value);
    partial void OnmonthChanged();
    partial void OnmonthintChanging(short value);
    partial void OnmonthintChanged();
    partial void OnyearChanging(long value);
    partial void OnyearChanged();
    partial void OnidinstrumentChanging(long value);
    partial void OnidinstrumentChanged();
    partial void OnexpirationdateChanging(System.DateTime value);
    partial void OnexpirationdateChanged();
    partial void OncqgsymbolChanging(string value);
    partial void OncqgsymbolChanged();
    #endregion
		
		public tblcontract()
		{
			this._tbloptions = new EntitySet<tbloption>(new Action<tbloption>(this.attach_tbloptions), new Action<tbloption>(this.detach_tbloptions));
			this._tbldailycontractsettlements = new EntitySet<tbldailycontractsettlement>(new Action<tbldailycontractsettlement>(this.attach_tbldailycontractsettlements), new Action<tbldailycontractsettlement>(this.detach_tbldailycontractsettlements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idcontract", DbType="BigInt NOT NULL")]
		public long idcontract
		{
			get
			{
				return this._idcontract;
			}
			set
			{
				if ((this._idcontract != value))
				{
					this.OnidcontractChanging(value);
					this.SendPropertyChanging();
					this._idcontract = value;
					this.SendPropertyChanged("idcontract");
					this.OnidcontractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_contractname", DbType="VarChar(45) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string contractname
		{
			get
			{
				return this._contractname;
			}
			set
			{
				if ((this._contractname != value))
				{
					this.OncontractnameChanging(value);
					this.SendPropertyChanging();
					this._contractname = value;
					this.SendPropertyChanged("contractname");
					this.OncontractnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_month", DbType="Char(1) NOT NULL")]
		public char month
		{
			get
			{
				return this._month;
			}
			set
			{
				if ((this._month != value))
				{
					this.OnmonthChanging(value);
					this.SendPropertyChanging();
					this._month = value;
					this.SendPropertyChanged("month");
					this.OnmonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_monthint", DbType="SmallInt NOT NULL")]
		public short monthint
		{
			get
			{
				return this._monthint;
			}
			set
			{
				if ((this._monthint != value))
				{
					this.OnmonthintChanging(value);
					this.SendPropertyChanging();
					this._monthint = value;
					this.SendPropertyChanged("monthint");
					this.OnmonthintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_year", DbType="BigInt NOT NULL")]
		public long year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this.OnyearChanging(value);
					this.SendPropertyChanging();
					this._year = value;
					this.SendPropertyChanged("year");
					this.OnyearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idinstrument", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long idinstrument
		{
			get
			{
				return this._idinstrument;
			}
			set
			{
				if ((this._idinstrument != value))
				{
					this.OnidinstrumentChanging(value);
					this.SendPropertyChanging();
					this._idinstrument = value;
					this.SendPropertyChanged("idinstrument");
					this.OnidinstrumentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expirationdate", DbType="Date NOT NULL")]
		public System.DateTime expirationdate
		{
			get
			{
				return this._expirationdate;
			}
			set
			{
				if ((this._expirationdate != value))
				{
					this.OnexpirationdateChanging(value);
					this.SendPropertyChanging();
					this._expirationdate = value;
					this.SendPropertyChanged("expirationdate");
					this.OnexpirationdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cqgsymbol", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string cqgsymbol
		{
			get
			{
				return this._cqgsymbol;
			}
			set
			{
				if ((this._cqgsymbol != value))
				{
					this.OncqgsymbolChanging(value);
					this.SendPropertyChanging();
					this._cqgsymbol = value;
					this.SendPropertyChanged("cqgsymbol");
					this.OncqgsymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblcontract_tbloption", Storage="_tbloptions", ThisKey="idinstrument", OtherKey="idinstrument")]
		public EntitySet<tbloption> tbloptions
		{
			get
			{
				return this._tbloptions;
			}
			set
			{
				this._tbloptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblcontract_tbldailycontractsettlement", Storage="_tbldailycontractsettlements", ThisKey="idcontract", OtherKey="idcontract")]
		public EntitySet<tbldailycontractsettlement> tbldailycontractsettlements
		{
			get
			{
				return this._tbldailycontractsettlements;
			}
			set
			{
				this._tbldailycontractsettlements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbloptions(tbloption entity)
		{
			this.SendPropertyChanging();
			entity.tblcontract = this;
		}
		
		private void detach_tbloptions(tbloption entity)
		{
			this.SendPropertyChanging();
			entity.tblcontract = null;
		}
		
		private void attach_tbldailycontractsettlements(tbldailycontractsettlement entity)
		{
			this.SendPropertyChanging();
			entity.tblcontract = this;
		}
		
		private void detach_tbldailycontractsettlements(tbldailycontractsettlement entity)
		{
			this.SendPropertyChanging();
			entity.tblcontract = null;
		}
	}
}
#pragma warning restore 1591
